//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\GitHub\MelonLanguage\MelonLanguage\Grammar\Melon.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MelonLanguage.Grammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MelonParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IMelonListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>decimalLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimalLiteral([NotNull] MelonParser.DecimalLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>decimalLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimalLiteral([NotNull] MelonParser.DecimalLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNullLiteral([NotNull] MelonParser.NullLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNullLiteral([NotNull] MelonParser.NullLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] MelonParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] MelonParser.StringLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccessExp([NotNull] MelonParser.MemberAccessExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccessExp([NotNull] MelonParser.MemberAccessExpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExp([NotNull] MelonParser.ParenthesisExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExp([NotNull] MelonParser.ParenthesisExpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] MelonParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] MelonParser.IntegerLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>binaryOperationExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryOperationExp([NotNull] MelonParser.BinaryOperationExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryOperationExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryOperationExp([NotNull] MelonParser.BinaryOperationExpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanLiteral([NotNull] MelonParser.BooleanLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanLiteral([NotNull] MelonParser.BooleanLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] MelonParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] MelonParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] MelonParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] MelonParser.BlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] MelonParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] MelonParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] MelonParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] MelonParser.StringContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.decimal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecimal([NotNull] MelonParser.DecimalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.decimal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecimal([NotNull] MelonParser.DecimalContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInteger([NotNull] MelonParser.IntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.integer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInteger([NotNull] MelonParser.IntegerContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.boolean"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean([NotNull] MelonParser.BooleanContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.boolean"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean([NotNull] MelonParser.BooleanContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.null"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull([NotNull] MelonParser.NullContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.null"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull([NotNull] MelonParser.NullContext context);
}
} // namespace MelonLanguage.Grammar
