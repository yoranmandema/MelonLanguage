//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\GitHub\MelonLanguage\MelonLanguage\Grammar\Melon.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MelonLanguage.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MelonLexer : Lexer {
	public const int
		DOT=1, COMMA=2, LEFTPARENTHESIS=3, RIGHTPARENTHESIS=4, IF=5, ELSE=6, LESS=7, 
		LESSEQ=8, GREATER=9, GREATEREQ=10, EQUAL=11, NOTEQUAL=12, IS=13, AND=14, 
		OR=15, ASTERISK=16, SLASH=17, PLUS=18, MINUS=19, REMAINDER=20, EXPONENT=21, 
		BITAND=22, BITOR=23, BITXOR=24, BITSHIFTL=25, BITSHIFTR=26, BITSHIFTUR=27, 
		INCREMENT=28, DECREMENT=29, NOT=30, BITNOT=31, ASSIGN=32, NULL=33, BOOLEAN=34, 
		NAME=35, INTEGER=36, DECIMAL=37, STRING=38, WHITESPACE=39, COMMENT=40, 
		LINE_COMMENT=41, ErrorCharacter=42;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LETTER", "DIGIT", "ESCAPED_QUOTE", "TRUE", "FALSE", "DOT", "COMMA", "LEFTPARENTHESIS", 
		"RIGHTPARENTHESIS", "IF", "ELSE", "LESS", "LESSEQ", "GREATER", "GREATEREQ", 
		"EQUAL", "NOTEQUAL", "IS", "AND", "OR", "ASTERISK", "SLASH", "PLUS", "MINUS", 
		"REMAINDER", "EXPONENT", "BITAND", "BITOR", "BITXOR", "BITSHIFTL", "BITSHIFTR", 
		"BITSHIFTUR", "INCREMENT", "DECREMENT", "NOT", "BITNOT", "ASSIGN", "NULL", 
		"BOOLEAN", "NAME", "INTEGER", "DECIMAL", "STRING", "WHITESPACE", "COMMENT", 
		"LINE_COMMENT", "ErrorCharacter"
	};


	public MelonLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "','", "'('", "')'", "'if'", "'else'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'is'", "'&&'", "'||'", "'*'", "'/'", "'+'", "'-'", 
		"'%'", "'**'", "'&'", "'^'", "'|'", "'<<'", "'>>'", "'>>>'", "'++'", "'--'", 
		"'!'", "'~'", "'='", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "COMMA", "LEFTPARENTHESIS", "RIGHTPARENTHESIS", "IF", "ELSE", 
		"LESS", "LESSEQ", "GREATER", "GREATEREQ", "EQUAL", "NOTEQUAL", "IS", "AND", 
		"OR", "ASTERISK", "SLASH", "PLUS", "MINUS", "REMAINDER", "EXPONENT", "BITAND", 
		"BITOR", "BITXOR", "BITSHIFTL", "BITSHIFTR", "BITSHIFTUR", "INCREMENT", 
		"DECREMENT", "NOT", "BITNOT", "ASSIGN", "NULL", "BOOLEAN", "NAME", "INTEGER", 
		"DECIMAL", "STRING", "WHITESPACE", "COMMENT", "LINE_COMMENT", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Melon.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 42 : STRING_action(_localctx, actionIndex); break;
		}
	}
	private void STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: 
			throw new System.Exception("Unterminated string!");
		 break;
		}
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2,\x119\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3"+
		" \x3 \x3 \x3!\x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3"+
		"&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x5(\xCD\n(\x3)\x3)\x5)\xD1\n)\x3"+
		")\x3)\x3)\a)\xD6\n)\f)\xE)\xD9\v)\x3*\x6*\xDC\n*\r*\xE*\xDD\x3+\x6+\xE1"+
		"\n+\r+\xE+\xE2\x3+\x3+\x6+\xE7\n+\r+\xE+\xE8\x5+\xEB\n+\x3,\x3,\a,\xEF"+
		"\n,\f,\xE,\xF2\v,\x3,\x3,\x5,\xF6\n,\x3-\x6-\xF9\n-\r-\xE-\xFA\x3-\x3"+
		"-\x3.\x3.\x3.\x3.\a.\x103\n.\f.\xE.\x106\v.\x3.\x3.\x3.\x3.\x3.\x3/\x3"+
		"/\x3/\x3/\a/\x111\n/\f/\xE/\x114\v/\x3/\x3/\x3\x30\x3\x30\x3\x104\x2\x2"+
		"\x31\x3\x2\x2\x5\x2\x2\a\x2\x2\t\x2\x2\v\x2\x2\r\x2\x3\xF\x2\x4\x11\x2"+
		"\x5\x13\x2\x6\x15\x2\a\x17\x2\b\x19\x2\t\x1B\x2\n\x1D\x2\v\x1F\x2\f!\x2"+
		"\r#\x2\xE%\x2\xF\'\x2\x10)\x2\x11+\x2\x12-\x2\x13/\x2\x14\x31\x2\x15\x33"+
		"\x2\x16\x35\x2\x17\x37\x2\x18\x39\x2\x19;\x2\x1A=\x2\x1B?\x2\x1C\x41\x2"+
		"\x1D\x43\x2\x1E\x45\x2\x1FG\x2 I\x2!K\x2\"M\x2#O\x2$Q\x2%S\x2&U\x2\'W"+
		"\x2(Y\x2)[\x2*]\x2+_\x2,\x3\x2\a\x4\x2\x43\\\x63|\x3\x2\x32;\x3\x2$$\x5"+
		"\x2\v\f\xF\xF\"\"\x4\x2\f\f\xF\xF\x121\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2"+
		"\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37"+
		"\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3"+
		"\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2"+
		"G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2"+
		"\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2"+
		"\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x3\x61"+
		"\x3\x2\x2\x2\x5\x63\x3\x2\x2\x2\a\x65\x3\x2\x2\x2\th\x3\x2\x2\x2\vm\x3"+
		"\x2\x2\x2\rs\x3\x2\x2\x2\xFu\x3\x2\x2\x2\x11w\x3\x2\x2\x2\x13y\x3\x2\x2"+
		"\x2\x15{\x3\x2\x2\x2\x17~\x3\x2\x2\x2\x19\x83\x3\x2\x2\x2\x1B\x85\x3\x2"+
		"\x2\x2\x1D\x88\x3\x2\x2\x2\x1F\x8A\x3\x2\x2\x2!\x8D\x3\x2\x2\x2#\x90\x3"+
		"\x2\x2\x2%\x93\x3\x2\x2\x2\'\x96\x3\x2\x2\x2)\x99\x3\x2\x2\x2+\x9C\x3"+
		"\x2\x2\x2-\x9E\x3\x2\x2\x2/\xA0\x3\x2\x2\x2\x31\xA2\x3\x2\x2\x2\x33\xA4"+
		"\x3\x2\x2\x2\x35\xA6\x3\x2\x2\x2\x37\xA9\x3\x2\x2\x2\x39\xAB\x3\x2\x2"+
		"\x2;\xAD\x3\x2\x2\x2=\xAF\x3\x2\x2\x2?\xB2\x3\x2\x2\x2\x41\xB5\x3\x2\x2"+
		"\x2\x43\xB9\x3\x2\x2\x2\x45\xBC\x3\x2\x2\x2G\xBF\x3\x2\x2\x2I\xC1\x3\x2"+
		"\x2\x2K\xC3\x3\x2\x2\x2M\xC5\x3\x2\x2\x2O\xCC\x3\x2\x2\x2Q\xD0\x3\x2\x2"+
		"\x2S\xDB\x3\x2\x2\x2U\xE0\x3\x2\x2\x2W\xEC\x3\x2\x2\x2Y\xF8\x3\x2\x2\x2"+
		"[\xFE\x3\x2\x2\x2]\x10C\x3\x2\x2\x2_\x117\x3\x2\x2\x2\x61\x62\t\x2\x2"+
		"\x2\x62\x4\x3\x2\x2\x2\x63\x64\t\x3\x2\x2\x64\x6\x3\x2\x2\x2\x65\x66\a"+
		"^\x2\x2\x66g\a$\x2\x2g\b\x3\x2\x2\x2hi\av\x2\x2ij\at\x2\x2jk\aw\x2\x2"+
		"kl\ag\x2\x2l\n\x3\x2\x2\x2mn\ah\x2\x2no\a\x63\x2\x2op\an\x2\x2pq\au\x2"+
		"\x2qr\ag\x2\x2r\f\x3\x2\x2\x2st\a\x30\x2\x2t\xE\x3\x2\x2\x2uv\a.\x2\x2"+
		"v\x10\x3\x2\x2\x2wx\a*\x2\x2x\x12\x3\x2\x2\x2yz\a+\x2\x2z\x14\x3\x2\x2"+
		"\x2{|\ak\x2\x2|}\ah\x2\x2}\x16\x3\x2\x2\x2~\x7F\ag\x2\x2\x7F\x80\an\x2"+
		"\x2\x80\x81\au\x2\x2\x81\x82\ag\x2\x2\x82\x18\x3\x2\x2\x2\x83\x84\a>\x2"+
		"\x2\x84\x1A\x3\x2\x2\x2\x85\x86\a>\x2\x2\x86\x87\a?\x2\x2\x87\x1C\x3\x2"+
		"\x2\x2\x88\x89\a@\x2\x2\x89\x1E\x3\x2\x2\x2\x8A\x8B\a@\x2\x2\x8B\x8C\a"+
		"?\x2\x2\x8C \x3\x2\x2\x2\x8D\x8E\a?\x2\x2\x8E\x8F\a?\x2\x2\x8F\"\x3\x2"+
		"\x2\x2\x90\x91\a#\x2\x2\x91\x92\a?\x2\x2\x92$\x3\x2\x2\x2\x93\x94\ak\x2"+
		"\x2\x94\x95\au\x2\x2\x95&\x3\x2\x2\x2\x96\x97\a(\x2\x2\x97\x98\a(\x2\x2"+
		"\x98(\x3\x2\x2\x2\x99\x9A\a~\x2\x2\x9A\x9B\a~\x2\x2\x9B*\x3\x2\x2\x2\x9C"+
		"\x9D\a,\x2\x2\x9D,\x3\x2\x2\x2\x9E\x9F\a\x31\x2\x2\x9F.\x3\x2\x2\x2\xA0"+
		"\xA1\a-\x2\x2\xA1\x30\x3\x2\x2\x2\xA2\xA3\a/\x2\x2\xA3\x32\x3\x2\x2\x2"+
		"\xA4\xA5\a\'\x2\x2\xA5\x34\x3\x2\x2\x2\xA6\xA7\a,\x2\x2\xA7\xA8\a,\x2"+
		"\x2\xA8\x36\x3\x2\x2\x2\xA9\xAA\a(\x2\x2\xAA\x38\x3\x2\x2\x2\xAB\xAC\a"+
		"`\x2\x2\xAC:\x3\x2\x2\x2\xAD\xAE\a~\x2\x2\xAE<\x3\x2\x2\x2\xAF\xB0\a>"+
		"\x2\x2\xB0\xB1\a>\x2\x2\xB1>\x3\x2\x2\x2\xB2\xB3\a@\x2\x2\xB3\xB4\a@\x2"+
		"\x2\xB4@\x3\x2\x2\x2\xB5\xB6\a@\x2\x2\xB6\xB7\a@\x2\x2\xB7\xB8\a@\x2\x2"+
		"\xB8\x42\x3\x2\x2\x2\xB9\xBA\a-\x2\x2\xBA\xBB\a-\x2\x2\xBB\x44\x3\x2\x2"+
		"\x2\xBC\xBD\a/\x2\x2\xBD\xBE\a/\x2\x2\xBE\x46\x3\x2\x2\x2\xBF\xC0\a#\x2"+
		"\x2\xC0H\x3\x2\x2\x2\xC1\xC2\a\x80\x2\x2\xC2J\x3\x2\x2\x2\xC3\xC4\a?\x2"+
		"\x2\xC4L\x3\x2\x2\x2\xC5\xC6\ap\x2\x2\xC6\xC7\aw\x2\x2\xC7\xC8\an\x2\x2"+
		"\xC8\xC9\an\x2\x2\xC9N\x3\x2\x2\x2\xCA\xCD\x5\t\x5\x2\xCB\xCD\x5\v\x6"+
		"\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCDP\x3\x2\x2\x2\xCE\xD1\a"+
		"\x61\x2\x2\xCF\xD1\x5\x3\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2"+
		"\xD1\xD7\x3\x2\x2\x2\xD2\xD6\a\x61\x2\x2\xD3\xD6\x5\x3\x2\x2\xD4\xD6\x5"+
		"\x5\x3\x2\xD5\xD2\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD4\x3\x2\x2\x2"+
		"\xD6\xD9\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8R\x3\x2"+
		"\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA\xDC\x5\x5\x3\x2\xDB\xDA\x3\x2\x2\x2\xDC"+
		"\xDD\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDET\x3\x2\x2"+
		"\x2\xDF\xE1\x5\x5\x3\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE0"+
		"\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xEA\x3\x2\x2\x2\xE4\xE6\a\x30\x2"+
		"\x2\xE5\xE7\x5\x5\x3\x2\xE6\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE6"+
		"\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEB\x3\x2\x2\x2\xEA\xE4\x3\x2\x2"+
		"\x2\xEA\xEB\x3\x2\x2\x2\xEBV\x3\x2\x2\x2\xEC\xF0\a$\x2\x2\xED\xEF\n\x4"+
		"\x2\x2\xEE\xED\x3\x2\x2\x2\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0"+
		"\xF1\x3\x2\x2\x2\xF1\xF5\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF6\a$\x2"+
		"\x2\xF4\xF6\b,\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6X\x3\x2"+
		"\x2\x2\xF7\xF9\t\x5\x2\x2\xF8\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA"+
		"\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\b-\x3"+
		"\x2\xFDZ\x3\x2\x2\x2\xFE\xFF\a\x31\x2\x2\xFF\x100\a,\x2\x2\x100\x104\x3"+
		"\x2\x2\x2\x101\x103\v\x2\x2\x2\x102\x101\x3\x2\x2\x2\x103\x106\x3\x2\x2"+
		"\x2\x104\x105\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x105\x107\x3\x2\x2\x2"+
		"\x106\x104\x3\x2\x2\x2\x107\x108\a,\x2\x2\x108\x109\a\x31\x2\x2\x109\x10A"+
		"\x3\x2\x2\x2\x10A\x10B\b.\x4\x2\x10B\\\x3\x2\x2\x2\x10C\x10D\a\x31\x2"+
		"\x2\x10D\x10E\a\x31\x2\x2\x10E\x112\x3\x2\x2\x2\x10F\x111\n\x6\x2\x2\x110"+
		"\x10F\x3\x2\x2\x2\x111\x114\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113"+
		"\x3\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x115\x116\b/"+
		"\x4\x2\x116^\x3\x2\x2\x2\x117\x118\v\x2\x2\x2\x118`\x3\x2\x2\x2\x10\x2"+
		"\xCC\xD0\xD5\xD7\xDD\xE2\xE8\xEA\xF0\xF5\xFA\x104\x112\x5\x3,\x2\x2\x3"+
		"\x2\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MelonLanguage.Grammar
