//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\GitHub\MelonLanguage\MelonLanguage\Grammar\Melon.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MelonLanguage.Grammar {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMelonListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MelonBaseListener : IMelonListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>decimalLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecimalLiteral([NotNull] MelonParser.DecimalLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>decimalLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecimalLiteral([NotNull] MelonParser.DecimalLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNullLiteral([NotNull] MelonParser.NullLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>nullLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNullLiteral([NotNull] MelonParser.NullLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] MelonParser.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] MelonParser.StringLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccessExp([NotNull] MelonParser.MemberAccessExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccessExp([NotNull] MelonParser.MemberAccessExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExp([NotNull] MelonParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExp([NotNull] MelonParser.ParenthesisExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegerLiteral([NotNull] MelonParser.IntegerLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>integerLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegerLiteral([NotNull] MelonParser.IntegerLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>binaryOperationExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOperationExp([NotNull] MelonParser.BinaryOperationExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryOperationExp</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOperationExp([NotNull] MelonParser.BinaryOperationExpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanLiteral([NotNull] MelonParser.BooleanLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanLiteral</c>
	/// labeled alternative in <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanLiteral([NotNull] MelonParser.BooleanLiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MelonParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MelonParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] MelonParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] MelonParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] MelonParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] MelonParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString([NotNull] MelonParser.StringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString([NotNull] MelonParser.StringContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.decimal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecimal([NotNull] MelonParser.DecimalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.decimal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecimal([NotNull] MelonParser.DecimalContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInteger([NotNull] MelonParser.IntegerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.integer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInteger([NotNull] MelonParser.IntegerContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.boolean"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean([NotNull] MelonParser.BooleanContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.boolean"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean([NotNull] MelonParser.BooleanContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="MelonParser.null"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNull([NotNull] MelonParser.NullContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MelonParser.null"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNull([NotNull] MelonParser.NullContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace MelonLanguage.Grammar
